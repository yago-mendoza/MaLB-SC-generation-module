{
    "success": false,
    "errors": {
        "type": 4,
        "message": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> temp_contract.sol\n\nError: Operator == not compatible with types string storage ref and literal_string \"Golden\"\n  --> temp_contract.sol:15:38:\n   |\n15 |         require(_numTickets == 1 || (userStatus[msg.sender] == \"Golden\" && _numTickets <= 3), \"Invalid number of tickets\");\n   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nError: Operator == not compatible with types string storage ref and literal_string \"Secure online platform with unique identifiers\"\n  --> temp_contract.sol:24:17:\n   |\n24 |         require(ticketTransferRules[_ticketId] == \"Secure online platform with unique identifiers\", \"Invalid transfer rules\");\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nError: Operator == not compatible with types string storage ref and literal_string \"Golden\"\n  --> temp_contract.sol:42:38:\n   |\n42 |         require(_numTickets == 1 || (userStatus[msg.sender] == \"Golden\" && _numTickets <= 3), \"Invalid number of tickets\");\n   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nError: Operator == not compatible with types string storage ref and literal_string \"Facilitated through unique ticket identifiers\"\n  --> temp_contract.sol:51:17:\n   |\n51 |         require(transferRules[_ticketId] == \"Facilitated through unique ticket identifiers\", \"Invalid transfer rules\");\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"
    },
    "abi": null,
    "bytecode": null
}
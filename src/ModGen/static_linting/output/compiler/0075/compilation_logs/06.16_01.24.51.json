{
    "success": false,
    "errors": {
        "type": 4,
        "message": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> temp_contract.sol\n\nError: Operator == not compatible with types string storage ref and literal_string \"Golden\"\n  --> temp_contract.sol:11:38:\n   |\n11 |         require(_numTickets == 1 || (userStatus[msg.sender] == \"Golden\" && _numTickets <= 3), \"Invalid number of tickets\");\n   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nError: Operator == not compatible with types string storage ref and literal_string \"Golden\"\n  --> temp_contract.sol:20:17:\n   |\n20 |         require(userStatus[msg.sender] == \"Golden\" && _numTickets <= 3, \"Invalid number of tickets to transfer\");\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nError: Operator == not compatible with types string storage ref and literal_string \"Golden\"\n  --> temp_contract.sol:45:38:\n   |\n45 |         require(_numTickets == 1 || (userStatus[msg.sender] == \"Golden\" && _numTickets <= 3), \"Invalid number of tickets\");\n   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nError: Operator == not compatible with types string storage ref and literal_string \"Golden\"\n  --> temp_contract.sol:54:17:\n   |\n54 |         require(userStatus[msg.sender] == \"Golden\" && _numTickets <= 3, \"Invalid number of tickets to transfer\");\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nError: Operator == not compatible with types string storage ref and literal_string \"Golden\"\n  --> temp_contract.sol:93:17:\n   |\n93 |         require(userStatus[msg.sender] == \"Golden\" || userStatus[msg.sender] == \"Plat ...\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nError: Operator == not compatible with types string storage ref and literal_string \"Platinum\"\n  --> temp_contract.sol:93:55:\n   |\n93 |  ... rStatus[msg.sender] == \"Golden\" || userStatus[msg.sender] == \"Platinum\" || userStatus[msg.sender] == \"Bron ...\n   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nError: Operator == not compatible with types string storage ref and literal_string \"Bronze\"\n  --> temp_contract.sol:93:95:\n   |\n93 |  ... tatus[msg.sender] == \"Platinum\" || userStatus[msg.sender] == \"Bronze\", \"Invalid user status\");\n   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nError: Operator == not compatible with types string storage ref and literal_string \"Golden\"\n   --> temp_contract.sol:101:17:\n    |\n101 |         require(userStatus[msg.sender] == \"Golden\" && _numTickets <= 3, \"Invalid number of tickets to transfer\");\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nError: Return argument type rational_const 1 / 4 is not implicitly convertible to expected type (type of first return variable) uint256.\n   --> temp_contract.sol:136:20:\n    |\n136 |             return 0.25;\n    |                    ^^^^\n\nError: Return argument type rational_const 1 / 20 is not implicitly convertible to expected type (type of first return variable) uint256.\n   --> temp_contract.sol:138:20:\n    |\n138 |             return 0.05;\n    |                    ^^^^\n\n"
    },
    "abi": null,
    "bytecode": null
}
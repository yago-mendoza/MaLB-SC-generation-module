[ 
    {
        "title": "event",
        "descriptions": [
            "It has to manage 50,000 tokens available for a concert, with each token representing one ticket. Users are limited to purchasing one ticket each, but those with Golden status can buy up to three tickets to transfer to other users. The ticket sales are divided into two phases. The first phase lasts for 5 minutes, and the second phase is triggered one week after the first one ends. If the event is cancelled, compensation includes an extra 25% for Golden ticket holders, 5% for Platinum, and no extra compensation for Bronze ticket holders.",
            ">",
            ">",
            ">"
        ],
        "requirements": [
            {
                "id": "REQ01",
                "name": "Token Allocation",
                "scope": "Managing the distribution and tracking of 50,000 concert tickets represented as tokens.",
                "input": "Total number of tokens (50,000), each ticket request.",
                "constraints": "Fixed total supply of tokens.",
                "output": "Each successful transaction decreases the total number of available tokens.",
                "primary_scenario": "User requests a ticket and if tokens are available, one token is allocated to the user.",
                "alternative_scenario": "All tokens are sold, no more tokens can be allocated."
            },
            {
                "id": "REQ02",
                "name": "User Purchase Limit",
                "scope": "Restricting standard users to purchasing only one ticket.",
                "input": "User status (standard), ticket purchase request.",
                "constraints": "User status must be standard; ticket count per standard user cannot exceed one.",
                "output": "Validation result of purchase request (approved or denied).",
                "primary_scenario": "Standard user purchases their first ticket successfully.",
                "alternative_scenario": "Standard user attempts to purchase more than one ticket; the system denies the request."
            },
            {
                "id": "REQ03",
                "name": "Golden Status Exception",
                "scope": "Allowing Golden status holders enhanced purchasing capabilities.",
                "input": "User status (Golden), ticket purchase requests.",
                "constraints": "User status must be verified as Golden; ticket count for Golden users cannot exceed three.",
                "output": "Validation result of purchase request for up to three tickets.",
                "primary_scenario": "Golden status user purchases up to three tickets successfully.",
                "alternative_scenario": "Golden status user attempts to purchase more than three tickets; the system denies the request."
            },
            {
                "id": "REQ04",
                "name": "Sales Phases",
                "scope": "Managing the ticket sales timeline in two phases.",
                "input": "Current time/date, phase status.",
                "constraints": "Sales must occur strictly within the defined phase durations.",
                "output": "Phase status (active or inactive).",
                "primary_scenario": "A user makes a purchase during an active sales phase.",
                "alternative_scenario": "A user attempts to purchase outside the active sales phase; the system denies the request."
            },
            {
                "id": "REQ05",
                "name": "Phase Timing",
                "scope": "Scheduling and triggering the two sales phases.",
                "input": "Start times for each phase, duration of the first phase.",
                "constraints": "Exact timing must be adhered to; the second phase begins exactly one week after the first ends.",
                "output": "Current phase status based on the timeline.",
                "primary_scenario": "System transitions from the first phase to the second phase exactly one week after the first ends.",
                "alternative_scenario": "Time checks occur frequently to ensure phase timings are respected."
            },
            {
                "id": "REQ06",
                "name": "Event Cancellation Compensation",
                "scope": "Event Cancellation Compensation",
                "input": "Calculating compensation for ticket holders if the event is cancelled.",
                "constraints": "Ticket holder's status (Golden, Platinum, Bronze), event cancellation status. Only applies if they bought in the first phase.",
                "output": "Compensation rates differ by status: 25% for Golden, 5% for Platinum, none for Bronze.",
                "primary_scenario": "Event is cancelled, and compensation is distributed according to user status.",
                "alternative_scenario": "Event proceeds as planned; no compensation is distributed."
            }
        ]
    },
    {
        "title": "auctioning",
        "descriptions": [
            "The goal is to auction limited VIP tickets to fans for a concert. Each ticket is represented as a unique token. Limit each address to bid a maximum of 3 times. Bids must be at least 5% higher than the current highest bid. Emit new highest bids and conclude when a time limit expires.",
            ">",
            ">",
            ">"
        ],
        "requirements": [
            {
                "id": "REQ01",
                "name": "Unique Token Representation",
                "scope": "Representing each VIP concert ticket as a unique token using the ERC-721 standard.",
                "input": "Concert details (artist, venue, date), token generation request.",
                "constraints": "Each token must be uniquely identifiable and comply with the ERC-721 standard.",
                "output": "Generation of a new unique token for each VIP ticket.",
                "primary_scenario": "A request is made to generate a token, and a unique ERC-721 token is minted for a VIP ticket.",
                "alternative_scenario": "Token generation fails due to system errors or non-compliance with ERC-721 standards."
            },
            {
                "id": "REQ02",
                "name": "Bid Limitation Per Address",
                "scope": "Limiting the number of bids an address can place during the auction to three.",
                "input": "Bidder's address, bid attempt.",
                "constraints": "Each address can only make three bids during the entire auction period.",
                "output": "Acceptance or rejection of a bid based on the bid count from the same address.",
                "primary_scenario": "Bidder places a bid and has not reached the three-bid limit, so the bid is accepted.",
                "alternative_scenario": "Bidder attempts to place a fourth bid, and the system rejects this bid."
            },
            {
                "id": "REQ03",
                "name": "Bid Increment Requirement",
                "scope": "Enforcing a rule that each new bid must be at least 5% higher than the current highest bid.",
                "input": "Amount of the new bid, current highest bid.",
                "constraints": "New bids must be quantifiably 5% higher than the current highest bid.",
                "output": "Validation result of the bid increment (approved or denied).",
                "primary_scenario": "A new bid is successfully placed that is 5% higher than the previous highest bid.",
                "alternative_scenario": "A bid is placed that does not meet the 5% higher requirement and is therefore rejected."
            },
            {
                "id": "REQ04",
                "name": "Emitting Bid Updates",
                "scope": "Notifying participants of a new highest bid through event emissions in the smart contract.",
                "input": "New highest bid details.",
                "constraints": "Each new highest bid must trigger an event emission.",
                "output": "Event emission that notifies all participants of the new highest bid.",
                "primary_scenario": "A new highest bid is placed, and an event is emitted to update participants.",
                "alternative_scenario": "A highest bid is placed, but due to a system fault, the event is not emitted."
            },
            {
                "id": "REQ05",
                "name": "Auction Time Limit",
                "scope": "Managing the auction duration with a set time limit, after which no further bids can be accepted.",
                "input": "Current time/date, auction end time.",
                "constraints": "Bids are only accepted within the predefined auction time frame.",
                "output": "Status of auction (active or concluded).",
                "primary_scenario": "A bid is placed within the active auction time and is accepted.",
                "alternative_scenario": "A bid attempt is made after the auction time has expired, and it is rejected."
            }
        ]
    },
    {
        "title": "upgrading",
        "descriptions": [
            "It is intented to manage tiered VIP memberships, allowing fans to upgrade or downgrade their membership based on the tokens they hold. Define membership levels as Bronze, Silver, and Gold, each with associated perks. Upgrading requires the owner to have a sufficient number of additional tokens (100 tokens for Silver, 200 for Gold). Include functionality for members to voluntarily lower their level, refunding tokens proportionally based on their tenure on the platform (70% if >2 years, 50% if >1 year, 30% if >6 months). Once downgraded, a member must wait 12 days before upgrading again.",
            ">",
            ">",
            ">"
        ],
        "requirements": [
            {
                "id": "REQ01",
                "name": "Tiered VIP Membership Management",
                "scope": "Managing tiered VIP memberships using an ERC-721-based smart contract where memberships are categorized into Bronze, Silver, and Gold levels.",
                "input": "Membership upgrade or downgrade request, member's current token count and membership level.",
                "constraints": "Memberships are strictly categorized into three levels with specific token requirements for each.",
                "output": "Member's new membership level following a successful upgrade or downgrade.",
                "primary_scenario": "Member requests an upgrade and has the necessary tokens for the next level, which is then processed successfully.",
                "alternative_scenario": "Member requests an upgrade without sufficient tokens, and the request is denied."
            },
            {
                "id": "REQ02",
                "name": "Membership Upgrade Requirements",
                "scope": "Defining and enforcing token requirements for upgrading membership levels among Bronze, Silver, and Gold.",
                "input": "Member's current membership level, number of tokens held, upgrade request.",
                "constraints": "100 additional tokens needed for Silver, 200 for Gold. Member must not have downgraded within the last 12 days.",
                "output": "Approval or denial of the membership upgrade based on token count and upgrade cooldown.",
                "primary_scenario": "Member meets the token requirement and cooldown period, successfully upgrades membership.",
                "alternative_scenario": "Member does not meet token requirement or is within cooldown period, and the upgrade is denied."
            },
            {
                "id": "REQ03",
                "name": "Voluntary Membership Downgrading",
                "scope": "Allowing members to voluntarily downgrade their membership level and receive a token refund based on their tenure.",
                "input": "Member's current level, tenure on the platform, downgrade request.",
                "constraints": "Token refund rates: 70% if tenure >2 years, 50% if >1 year, 30% if >6 months. Downgrade is followed by a 12-day upgrade cooldown.",
                "output": "Number of tokens refunded and new membership level.",
                "primary_scenario": "Member requests a downgrade and is eligible for a refund based on tenure; tokens are refunded accordingly.",
                "alternative_scenario": "Member requests a downgrade but does not meet the minimum tenure for a refund; downgrade proceeds without refund."
            },
            {
                "id": "REQ04",
                "name": "Upgrade Cooldown Management",
                "scope": "Managing the cooldown period preventing members from upgrading their membership level again too soon after downgrading.",
                "input": "Date of last downgrade, current date, upgrade request.",
                "constraints": "12-day cooldown period after any downgrade.",
                "output": "Approval or denial of the upgrade request based on cooldown compliance.",
                "primary_scenario": "Member attempts to upgrade more than 12 days after a downgrade and is successful.",
                "alternative_scenario": "Member attempts to upgrade within 12 days of downgrading; the request is denied."
            }
        ]
    },
    {
        "title": "rewards",
        "descriptions": [
            "Design a smart contract that tracks and rates fan interactions for each content piece. Fans earn points that influence their ranking on the platform, with interactions categorized as likes, comments, shares, and views. Each interaction type carries different weightings (1 point for likes, 10 points for shares, 20 points for comments). Fans can earn a maximum of 100 points per day from each activity. Platinum and Gold tier members can earn up to 150 and 200 points, respectively, but the extra points expire after a week.",
            ">",
            ">",
            ">"
        ],
        "requirements": [
            {
                "id": "REQ01",
                "name": "Interaction Tracking and Rating",
                "scope": "Tracking and rating fan interactions with content pieces using a smart contract. Interactions include likes, comments, shares, and views, each contributing differently to a fan's overall points and ranking on the platform.",
                "input": "Type of interaction (like, comment, share, view), fan's interaction details.",
                "constraints": "Interactions are quantified with specific points: 1 point for likes, 10 for shares, 20 for comments.",
                "output": "Updated points and ranking for the fan based on their interactions.",
                "primary_scenario": "Fan interacts with a content piece (e.g., likes it), and points are added to their total score.",
                "alternative_scenario": "Fan reaches the daily point limit from a specific interaction type; further points from that interaction type are not added until the next day."
            },
            {
                "id": "REQ02",
                "name": "Daily Point Limits",
                "scope": "Enforcing a maximum point limit that a fan can earn per day from each type of interaction to prevent point inflation and ensure equitable ranking.",
                "input": "Fan's daily interaction count, type of interaction.",
                "constraints": "Standard limit is 100 points per day per activity. Adjusted limits for Platinum (150 points) and Gold (200 points) tier members, with expiration rules for extra points.",
                "output": "Total points earned by the fan for the day, considering the daily limits.",
                "primary_scenario": "Fan earns points up to the daily limit for an interaction type.",
                "alternative_scenario": "Fan exceeds the daily point limit for an interaction type; excess points are not counted."
            },
            {
                "id": "REQ03",
                "name": "Tier-Based Point Adjustment",
                "scope": "Adjusting daily point limits based on membership tier (Platinum and Gold), with special rules for the expiration of extra points earned beyond the standard limit.",
                "input": "Fan's membership tier, points earned from interactions, date of points earning.",
                "constraints": "Platinum members can earn up to 150 points, and Gold members up to 200 points per activity, but extra points expire after one week.",
                "output": "Adjusted and valid points based on tier and expiration of extra points.",
                "primary_scenario": "Platinum or Gold tier fan earns points exceeding the standard limit, and the system tracks the expiration of these points.",
                "alternative_scenario": "Extra points expire after a week, reducing the fan's total points if they were not utilized within that timeframe."
            }
        ]
    },
    {
        "title": "subscription",
        "descriptions": [
            "A smart contract is needed to manage multiple subscription levels where fans pay a monthly fee in tokens to access exclusive content. Subscription levels include Basic (10 tokens/month), Premium (50 tokens/month), and Elite (100 tokens/month). Automatically deduct fees from a user's token balance every 30 days. If there are insufficient funds, the subscription is paused. Implement auto-renewal features, and if a subscription expires, access to exclusive content is immediately revoked until renewal.",
            ">",
            ">",
            ">"
        ],
        "requirements": [
            {
                "id": "REQ01",
                "name": "Subscription Level Management",
                "scope": "Managing multiple subscription levels (Basic, Premium, Elite) within a smart contract, allowing fans to access exclusive content based on their subscription tier.",
                "input": "Fan's subscription level selection, token payment.",
                "constraints": "Subscription fees: Basic at 10 tokens/month, Premium at 50 tokens/month, Elite at 100 tokens/month.",
                "output": "Activation or update of the fan's subscription status based on the paid tier.",
                "primary_scenario": "Fan selects a subscription level and successfully pays the required tokens, activating the subscription.",
                "alternative_scenario": "Fan selects a subscription level but lacks sufficient tokens to pay the fee, preventing activation."
            },
            {
                "id": "REQ02",
                "name": "Automatic Fee Deduction",
                "scope": "Automatically deducting subscription fees from a user's token balance every 30 days to maintain active subscriptions.",
                "input": "Current date, last payment date, user's token balance, subscription level.",
                "constraints": "Fees are deducted every 30 days, corresponding to the subscription level's cost.",
                "output": "Updated token balance and subscription status (active or paused).",
                "primary_scenario": "It is time for the fee deduction, the fan has sufficient balance, and the fee is successfully deducted, keeping the subscription active.",
                "alternative_scenario": "Insufficient balance at the time of fee deduction leads to the subscription being paused."
            },
            {
                "id": "REQ03",
                "name": "Subscription Auto-Renewal",
                "scope": "Implementing an auto-renewal feature for subscriptions, ensuring continuous access to exclusive content unless manually cancelled or paused due to insufficient funds.",
                "input": "Subscription expiry date, user's token balance, user's renewal settings.",
                "constraints": "Subscriptions attempt to auto-renew unless funds are insufficient or the user has cancelled.",
                "output": "Renewal of subscription and deduction of corresponding fee, or failure to renew due to cancellation or insufficient funds.",
                "primary_scenario": "Subscription is due for renewal, auto-renewal is enabled, and the user has sufficient tokens; subscription is renewed.",
                "alternative_scenario": "Subscription is due for renewal but cannot be processed due to insufficient funds or user cancellation; access is revoked until issues are resolved."
            },
            {
                "id": "REQ04",
                "name": "Access Revocation on Expiry",
                "scope": "Revoking access to exclusive content immediately if a subscription expires without renewal, maintaining the integrity and exclusivity of content.",
                "input": "Subscription status, access request to exclusive content.",
                "constraints": "Access to content is directly tied to the active status of a subscription.",
                "output": "Access granted if subscription is active; access denied if subscription is expired.",
                "primary_scenario": "Fan tries to access content with an active subscription, and access is granted.",
                "alternative_scenario": "Subscription has expired due to non-renewal or insufficient funds, and access to content is denied."
            }
        ]
    },
    {
        "title": "voting",
        "descriptions": [
            "Fans can vote on various categories using tokens. Votes are weighted by the number of tokens held. Categories include Best Video, Best Fan Art, and Best Comment. Each category has its own voting function, where 1 token equals 1 vote. Fans can allocate tokens to different categories but must hold at least 10 tokens to participate. Voting is open for 30 days.",
            ">",
            ">",
            ">"
        ],
        "requirements": [
            {
                "id": "REQ01",
                "name": "Token-Based Voting System",
                "scope": "Implementing an ERC721 smart contract for a Fan Engagement Platform that allows fans to vote on different categories (Best Video, Best Fan Art, Best Comment) using tokens, where the number of tokens held by a fan determines their voting power.",
                "input": "Fan's token count, category selection, number of tokens allocated for voting.",
                "constraints": "Each token equates to one vote. Fans must hold at least 10 tokens to participate in voting.",
                "output": "Recorded votes for each category based on tokens allocated by fans.",
                "primary_scenario": "Fan allocates tokens to a category, and votes are added to the total count of that category based on the number of tokens used.",
                "alternative_scenario": "Fan attempts to vote with fewer than 10 tokens, and the voting attempt is rejected."
            },
            {
                "id": "REQ02",
                "name": "Category-Specific Voting Functions",
                "scope": "Creating separate voting functions within the smart contract for each category, allowing fans to allocate tokens specifically for Best Video, Best Fan Art, and Best Comment.",
                "input": "Category-specific vote request, number of tokens allocated.",
                "constraints": "Separate functions must exist for each category to prevent vote misallocation.",
                "output": "Successful recording of votes in the correct category based on fan's token allocation.",
                "primary_scenario": "Fan selects a category, allocates a specific number of tokens, and the tokens are correctly applied as votes in that category.",
                "alternative_scenario": "Fan mistakenly tries to allocate tokens to a non-existent category, and the transaction is nullified."
            },
            {
                "id": "REQ03",
                "name": "Voting Eligibility and Minimum Token Requirement",
                "scope": "Ensuring that only fans with at least 10 tokens can participate in the voting process, maintaining fairness and engagement in voting.",
                "input": "Fan's token holdings, voting request.",
                "constraints": "Fans need to hold a minimum of 10 tokens to be eligible for voting.",
                "output": "Validation of fan's eligibility to vote based on token holdings.",
                "primary_scenario": "Fan meets the minimum token requirement and is allowed to vote.",
                "alternative_scenario": "Fan does not meet the minimum token requirement and is denied the ability to vote."
            },
            {
                "id": "REQ04",
                "name": "Voting Period Management",
                "scope": "Managing the open period for voting across all categories, ensuring the voting process is open for a designated timeframe (30 days).",
                "input": "Current date, start and end dates of the voting period.",
                "constraints": "Voting must only occur within the 30-day period after initiation.",
                "output": "Status of voting period (open or closed).",
                "primary_scenario": "Fan votes within the designated 30-day period, and the vote is accepted.",
                "alternative_scenario": "Fan attempts to vote outside of the 30-day period, and the vote is not accepted."
            }
        ]
    },
    {
        "title": "distribution",
        "descriptions": [
            "Program a highly efficient ERC721 Smart Contract for the Fan Engagement Platform to distribute rewards based on activity and token holdings at the end of each month. Fans with more than 200 tokens held and at least 50 activity points accumulated in a month qualify for rewards. Rewards consist of awarding 10% of held tokens as additional tokens. Distribution occurs automatically on the last day of each month, emitting an event.",
            ">",
            ">",
            ">"
        ],
        "requirements": [
            {
                "id": "REQ01",
                "name": "Reward Qualification Criteria",
                "scope": "Defining and validating the criteria for fans to qualify for monthly rewards on the Fan Engagement Platform, based on token holdings and activity points.",
                "input": "Fan's total tokens, monthly activity points.",
                "constraints": "Fans must hold more than 200 tokens and accumulate at least 50 activity points in a month to qualify for rewards.",
                "output": "Determination of whether a fan qualifies for the monthly reward.",
                "primary_scenario": "Fan exceeds both the token holding and activity point thresholds, qualifying for rewards.",
                "alternative_scenario": "Fan does not meet one or both of the thresholds, and does not qualify for rewards."
            },
            {
                "id": "REQ02",
                "name": "Reward Calculation and Distribution",
                "scope": "Automatically calculating and distributing rewards to qualified fans at the end of each month, where the reward is 10% of the tokens they hold.",
                "input": "Qualified fan's token holdings, current date.",
                "constraints": "Reward calculation occurs only if the fan qualifies and on the last day of the month.",
                "output": "Additional tokens credited to the fan's account, proportional to their held tokens.",
                "primary_scenario": "On the last day of the month, tokens are automatically credited to the accounts of fans who qualify.",
                "alternative_scenario": "It is not the last day of the month, or the fan does not qualify; no tokens are distributed."
            },
            {
                "id": "REQ03",
                "name": "Event Emission upon Reward Distribution",
                "scope": "Emitting an event each time rewards are distributed to notify the system and potentially other linked services or interfaces.",
                "input": "Details of the reward distribution (fan identifier, amount of tokens distributed).",
                "constraints": "An event must be emitted for each reward distribution, capturing all relevant details.",
                "output": "Event log that provides transparency and traceability of the reward distribution process.",
                "primary_scenario": "Rewards are distributed and an event is emitted detailing the distribution.",
                "alternative_scenario": "No rewards are distributed (due to non-qualification or other reasons), hence no event is emitted."
            }
        ]
    },
    {
        "title": "referral",
        "descriptions": [
            "Smart Contract that rewards fans for referring friends, with bonuses based on the number of successful referrals. Successful referrals are counted when the referred friend creates an account and buys a ticket for an event. Bonuses include 10 tokens for 5 referrals, 30 tokens for 10, and 70 tokens for 20. Additionally, if a referred friend further refers others, the original referrer receives 150 tokens.",
            ">",
            ">",
            ">"
        ],
        "requirements": [
            {
                "id": "REQ01",
                "name": "Referral Tracking System",
                "scope": "Implementing a tracking system within an ERC721 smart contract to monitor successful referrals, where a referral is deemed successful once the referred friend creates an account and purchases an event ticket.",
                "input": "Referrer's ID, referred friend's account creation and ticket purchase status.",
                "constraints": "Referrals must be confirmed by both account creation and an event ticket purchase by the referred friend.",
                "output": "Incremented referral count for the referrer upon successful referral confirmation.",
                "primary_scenario": "A referred friend creates an account and purchases a ticket, successfully confirming a referral and increasing the referrer's count.",
                "alternative_scenario": "A referred friend creates an account but does not purchase a ticket, resulting in an unsuccessful referral that does not increase the count."
            },
            {
                "id": "REQ02",
                "name": "Referral Bonus Distribution",
                "scope": "Calculating and distributing bonuses to fans based on the number of successful referrals made. Bonuses are tiered based on referral milestones.",
                "input": "Referrer's ID, number of successful referrals.",
                "constraints": "Bonuses are set at 10 tokens for 5 referrals, 30 tokens for 10 referrals, and 70 tokens for 20 referrals. Distribution occurs as each milestone is reached.",
                "output": "Tokens awarded to referrers upon reaching specific referral milestones.",
                "primary_scenario": "Referrer reaches a referral milestone and is automatically awarded the corresponding token bonus.",
                "alternative_scenario": "Referrer's total referrals do not meet any of the bonus thresholds, resulting in no bonus distribution."
            },
            {
                "id": "REQ03",
                "name": "Second-Level Referral Rewards",
                "scope": "Rewarding the original referrer with additional tokens if their referred friends refer others to the platform.",
                "input": "Original referrer's ID, successful second-level referral activity.",
                "constraints": "The original referrer earns a bonus only when a referred friend successfully refers others.",
                "output": "150 tokens awarded to the original referrer for each successful second-level referral.",
                "primary_scenario": "A referred friend successfully refers another person who creates an account and purchases a ticket, triggering a second-level reward for the original referrer.",
                "alternative_scenario": "A referred friend attempts to refer another person, but the referral does not complete the required actions (account creation and ticket purchase), so no second-level reward is issued."
            },
            {
                "id": "REQ04",
                "name": "Event Emission for Reward Activities",
                "scope": "Emitting blockchain events for each reward activity related to referrals to ensure transparency and traceability within the smart contract operations.",
                "input": "Details of the referral reward distribution (referrer's ID, number of tokens awarded).",
                "constraints": "An event must be emitted whenever tokens are distributed as a referral reward.",
                "output": "Blockchain event logs that detail each instance of reward distribution for auditing and tracking purposes.",
                "primary_scenario": "Tokens are awarded for reaching a referral milestone or for second-level referrals, and an event is emitted detailing these transactions.",
                "alternative_scenario": "No tokens are awarded due to failure to meet referral criteria, hence no event is emitted."
            }
        ]
    }
]
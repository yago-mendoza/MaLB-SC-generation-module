[tool.poetry]
name = "src"
version = "0.1.0"
description = ""
authors = ["yago-mendoza <yagomendoza.dev@gmail.com>"]
readme = "README.md"

[[tool.poetry.packages]]
include = "*"

[tool.poetry.dependencies]
python = "^3.9.8"
# black = "^24.2.0"
# ruff = "^0.3.2"
# pytest = "^8.1.1"
# pre-commit = "^3.6.2"
requests = "^2.26.0"
langchain = "^0.1.16"
langchain-openai = "^0.1.3"
pytest = "^8.1.1"
fastapi = "^0.110.2"
ollama = "^0.1.8"
openai = "^1.23.3"
langchain-groq = "^0.1.2"
groq = "^0.5.0"
sphinx = "^7.3.7"
sphinx-rtd-theme = "^2.0.0"
llama-index = "^0.10.33"
llama-index-llms-openai = "^0.1.16"
dspy-ai = "^2.4.9"
deepeval = "^0.21.36"
flask = "^3.0.3"
ipywidgets = "^8.1.2"
matplotlib = "^3.8.4"
import-ipynb = "^0.1.4"
streamlit = "^1.34.0"

[tool.poetry.group.dev.dependencies]
ipykernel = "^6.29.4"

[tool.black]
skip-string-normalization = true
line-length = 88

# exclude = ["jupyter_notebook_config.py"]
# select = [
#     "E",  # pycodestyle errors (settings from FastAPI, thanks, @tiangolo!)
#     "W",  # pycodestyle warnings
#     "F",  # pyflakes
#     "I",  # isort
#     "C",  # flake8-comprehensions
#     "B",  # flake8-bugbear
# ]
# ignore = [
#     "E501",  # line too long, handled by black
#     "C901",  # too complex
# ]

[tool.ruff.lint.isort]
order-by-type = true
relative-imports-order = "closest-to-furthest"
extra-standard-library = ["typing"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
known-first-party = []

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.isort]
profile = "black"

[tool.ruff.lint]
select = [
    "ARG",
    "B",
    "C4",
    "EM",
    "FA",
    "I",
    "PERF",
    "PIE",
    "PT",
    "PTH",
    "RET",
    "RSE",
    "RUF",
    "SIM",
    "TRY",
    "UP",
    "ERA",
    "Q",
    "YTT",
    "N",
]
